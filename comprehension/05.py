# Включение вложенного списка

# Включение вложенного списка, в отличие от включения списка с вложенными циклами, являются включение списка в пределах включения списка. 

# Начальным выражением может быть любое произвольное выражение, включая другое включение.

#Списковое включение с вложенным циклом
[x + y for x in [1, 2, 3] for y in [3, 4, 5]] # Out: [4, 5, 6, 5, 6, 7, 6, 7, 8]

#Вложенное списковое включение
[[x + y for x in [1, 2, 3]] for y in [3, 4, 5]] #Out: [[4, 5, 6], [5, 6, 7], [6, 7, 8]]

 
# пример эквивалентен

l = []
for y in [3, 4, 5]:
    temp = []
    for x in [1, 2, 3]:
        temp.append(x + y)
    l.append(temp)

# пример транспонирования матрицы.

matrix = [[1,2,3],
          [4,5,6],
          [7,8,9]] 

print([[row[i] for row in matrix] for i in range(len(matrix))])
# Out: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]


print([[[i + j + k for k in 'cd'] for j in 'ab'] for i in '12'])
# Out: [[['1ac', '1ad'], ['1bc', '1bd']], [['2ac', '2ad'], ['2bc', '2bd']]] 


# упрощённые конструкции обработки списков

all_pairs = [(i, j) for i in range(5) for j in range(5) if i <= j]
# [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 1), (1, 2), (1, 3), (1, 4), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (4, 4)]
print(all_pairs)
# Того же самого можно добиться такой конструкцией:


all_pairs = []
for i in range(5):
    for j in range(5):
        if i <= j:
            all_pairs.append((i, j))

print(all_pairs)