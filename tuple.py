# Кортежи (tuple)

# Список – это изменяемый тип данных. 
# Т.е. если у нас есть список a = [1, 2, 3] и мы хотим заменить второй элемент с 2 на 15, 
# то мы может это сделать, напрямую обратившись к элементу списка.

a = [1, 2, 3]

# Кортеж (tuple) – это неизменяемая структура данных, которая похожа на список. 

# Существует несколько причин, по которым стоит использовать кортежи вместо списков. 
# Одна из них – это обезопасить данные от случайного изменения. 
# Если мы получили откуда-то массив данных, и у нас есть желание поработать с ним, 
# но при этом непосредственно менять данные мы не собираемся, 
# тогда, это как раз тот случай, когда кортежи придутся как нельзя кстати. 

# Кортежи в памяти занимают меньший объем по сравнению со списками.

lst = [10, 20, 30]
tpl = (10, 20, 30)
print(lst.__sizeof__()) # 32
print(tpl.__sizeof__()) # 24

# прирост производительности связан с тем, что кортежи работают быстрее, чем списки (т.е. на операции перебора элементов и т.п. будет тратиться меньше времени). 

## Создание кортежей
# Синтаксически, кортеж - это список значений через запятую:

t = 'a', 'b', 'c', 'd', 'e'

# Хотя это и необязательно, обычно заключать кортежи в скобки:

t = ('a', 'b', 'c', 'd', 'e')

# Создайте пустой кортеж с круглыми скобками:

t0 = ()
type(t0)            # <type 'tuple'>

### Одноэлементные кортежи:
# Чтобы создать кортеж с одним элементом, необходимо добавить заключительную запятую:

t1 = 'a',
type(t1)              # <type 'tuple'>

# Для создания одноэлементного кортежа необходимо использовать завершающую запятую.

# Для одноэлементных кортежей рекомендуется использовать круглые скобки.

t2 = ('a',)           # PEP8-compliant
t2 = 'a',             # this notation is not recommended by PEP8
t2 = ('a', )          # this notation is not recommended by PEP8
    
# Обратите внимание, что одно значение в скобках не является кортежем:

t2 = ('a')
type(t2)              # <type 'str'>


# Другой способ создать кортеж является встроенной функцией tuple .

t = tuple('lupins')
print(t)              # ('l', 'u', 'p', 'i', 'n', 's')
t = tuple(range(3))
print(t)              # (0, 1, 2)

# Для создания пустого кортежа:

b = tuple()
print(type(b)) # <class 'tuple'>

# Кортеж с заданным содержанием создается также как список, только вместо квадратных скобок используются круглые.

# a = (1, 2, 3, 4, 5)
print(type(a)) # <class 'tuple'>

print(a) # (1, 2, 3, 4, 5)

# - Кортежи являются последовательностями. 
# - При создании кортежи заключаются в круглые скобки. 
# - Кортежи не позволяют изменять свои значения и не имеют методов.

## Создание кортежей
# Синтаксически, кортеж - это список значений через запятую:

t = 'a', 'b', 'c', 'd', 'e'

# Хотя это и необязательно, обычно заключать кортежи в скобки:
t = ('a', 'b', 'c', 'd', 'e')
# Создайте пустой кортеж с круглыми скобками:
t0 = ()
type(t0)            # <type 'tuple'>

### Одноэлементные кортежи:
# Чтобы создать кортеж с одним элементом, необходимо добавить заключительную запятую:
t1 = 'a',
type(t1)              # <type 'tuple'>

# Для создания одноэлементного кортежа необходимо использовать завершающую запятую.

# Для одноэлементных кортежей рекомендуется использовать круглые скобки.

t2 = ('a',)           # PEP8-compliant
t2 = 'a',             # this notation is not recommended by PEP8
t2 = ('a', )          # this notation is not recommended by PEP8
  
# Обратите внимание, что одно значение в скобках не является кортежем:
t2 = ('a')
type(t2)              # <type 'str'>

# Другой способ создать кортеж является встроенной функцией tuple .

t = tuple('lupins')
print(t)              # ('l', 'u', 'p', 'i', 'n', 's')
t = tuple(range(3))
print(t)              # (0, 1, 2)

# Для создания пустого кортежа:

b = tuple()
print(type(b)) # <class 'tuple'>

# Кортеж с заданным содержанием создается также как список, только вместо квадратных скобок используются круглые.

a = (1, 2, 3, 4, 5)
print(type(a)) # <class 'tuple'>

print(a) # (1, 2, 3, 4, 5)

# - Кортежи являются последовательностями. 
# - При создании кортежи заключаются в круглые скобки. 
# - Кортежи не позволяют изменять свои значения и не имеют методов.

## Доступ к элементам кортежа
# Доступ к элементам кортежа осуществляется также как к элементам списка – через указание индекса. 

### Индексирование кортежей

x = (1, 2, 3)
x[0]  # 1
x[1]  # 2
x[2]  # 3
x[3]  # IndexError: tuple index out of range

# Индексирование с отрицательными числами начнется с последнего элемента как -1:

x[-1] # 3
x[-2] # 2
x[-3] # 1
x[-4] # IndexError: tuple index out of range

## Из кортежа можно извлекать элементы:

a[3] 

## Срезы
# Чтобы получить доступ к фрагменту [a: b], мы должны перебрать каждый элемент между индексами a и b. 

## Из кортежа можно брать срезы:
a[1:3] 

## Индексирование ряда элементов
print(x[:-1])   # (1, 2)
print(x[-1:])   # (3,)
print(x[1:3])   # (2, 3) 

## Кортежи неизменны

# Одним из основных отличий между list s и tuple с в Python является то, что кортежи являются неизменяемыми:

# С кортежем мы не можем производить такие операции, т.к. элементы его изменять нельзя.

b = (1, 2, 3)
print(b)

b[1] = 15
# Traceback (most recent call last):
#   File "<pyshell#6>", line 1, in <module>
#     b[1] = 15
# TypeError: 'tuple' object does not support item assignment

   
# Точно так же, кортежи не имеют .append и .extend методы. 

# Вы можете использовать += оператор, но он изменяет связывание переменной, создавая новый кортеж с новыми элементоми, а не сам кортеж:


t = (1, 2)
q = t
t += (3, 4)
t # (1, 2, 3, 4)
q # (1, 2)

# Будьте осторожны при размещении изменяемых объектов, таких как lists, внутри кортежей. Это может привести к очень запутанным результатам при их изменении:

t = (1, 2, 3, [1, 2, 3]) # (1, 2, 3, [1, 2, 3])
t[3] += [4, 5]
 
# TypeError: 'tuple' object does not support item assignment


a = (1, 2, 3, 4, 5)
print(a[0])

print(a[1:3])

a[1] = 3
# Traceback (most recent call last):
#   File "<pyshell#24>", line 1, in <module>
#     a[1] = 3
# TypeError: 'tuple' object does not support item assignment


## Удаление кортежей
# Удалить отдельные элементы из кортежа невозможно.

a = (1, 2, 3, 4, 5)
del a[0]
# Traceback (most recent call last):
#   File "<pyshell#26>", line 1, in <module>
#     del a[0]
# TypeError: 'tuple' object doesnt support item deletion

## Но можно удалить кортеж целиком.

del a
print(a)
# Traceback (most recent call last):
#   File "<pyshell#28>", line 1, in <module>
#     print(a)
# NameError: name 'a' is not defined

### Преобразование кортежа в список и обратно

# На базе кортежа можно создать список, верно и обратное утверждение. 

# Для превращения списка в кортеж достаточно передать его в качестве аргумента функции tuple().

lst = [1, 2, 3, 4, 5]
print(type(lst)) # <class 'list'>
print(lst) # [1, 2, 3, 4, 5]
tpl = tuple(lst) 
print(type(tpl)) # <class 'tuple'>
print(tpl) # (1, 2, 3, 4, 5)

### Обратная операция также является корректной.

tpl = (2, 4, 6, 8, 10)
print(type(tpl)) # <class 'tuple'>
print(tpl) # (2, 4, 6, 8, 10)
lst = list(tpl)
print(type(lst)) # <class 'list'>
print(lst) # [2, 4, 6, 8, 10]

## Упаковка и распаковка кортежей

# Присваивания a = 1, 2, 3 также называют упаковкой.

# Для распаковки значений из кортежа и выполнения нескольких назначений используйте
# unpacking AKA multiple assignment
x, y, z = (1, 2, 3) 
# x == 1
# y == 2
# z == 3
     
# Символ _ может быть использован в качестве одноразового использования имени переменной:
a = 1, 2, 3, 4
_, x, y, _ = a
# x == 2
# y == 3

### Реверсивные элементы

colors = "red", "green", "blue"
rev = colors[::-1]
# rev: ("blue", "green", "red")
colors = rev
# colors: ("blue", "green", "red")

# Реверсия дает итерацию, которая преобразуется в кортеж:

rev = tuple(reversed(colors))
# rev: ("blue", "green", "red")
colors = rev
# colors: ("blue", "green", "red") 

## Присваивание последовательностей
# В Python последовательности можно присвоить последовательность значений. Присваивание происходит в соответствии с позициями элементов в последовательностях.

### Присваивание кортежей.

a,b='c','d' 
a,b # ('c', 'd')

### Присваивание строки кортежу
a,b,c='ijk' 
a,b,c # ('i', 'j', 'k')

### Присваивание кортежа списку
[A,B]=(1,2)
A,B # (1, 2)

### Присваивание последовательности целых чисел переменным a,b,c
a,b,c=range(3)
a,b,c # (0, 1, 2)

# Это равносильно командам a='c'; b='d'.
### Обмен значений переменных с помощью кортежей
a,b=1,2
a,b # (1, 2)
a,b=b,a
a,b # (2, 1)

### Можно осуществлять присваивание одного объекта нескольким переменным

a=b=c=1
a # [1]
b # 1
c # 1

# Такое присваивание удобно выполнять для неизменяемых объектов. Следует учитывать, что если присваивается изменяемый объект, то при его изменении с помощью одной переменной, изменяются и другие переменные.

a=b=c=[]
a.append(1)
a # [1]
b # [1]
c # [1]

## Встроенные функции кортежей

### Сравнение
Два картежа сравниваются лексикографически: считаются равными, если имеют одинаковую длину и равны их соответствующие элементы:
a = (3, 2, 1)
b = (1, 2, 3)
d = (3, 2, 2)
e = (3, 2)
f = (3, 2, 'a')

a > b  # True
a > d  # False
d > b  # True
a > e  # True

a > f  # TypeError: '>' not supported between instances of 'int' and 'str'


# Пустой кортеж — это глобально уникальный объект. Таким образом, все пустые кортежи — это один и тот же объект, а значит и адрес в памяти у таких кортежей один.

a = ()
b = ()
a is b # True
id(a) == id(b)  # True

# - Если элементы одного типа, python выполняет сравнение и возвращает результат. 
# - Если элементы разных типов, он проверяет, являются ли они числами.
# - Если числа, проведите сравнение.
# - Если один из элементов является числом, то возвращается другой элемент.
# - В противном случае типы сортируются по алфавиту. 
# - Если мы достигли конца одного из списков, более длинный список будет «больше». 
# - Если оба списка одинаковы, возвращается 0.

tuple1 = ('a', 'b', 'c', 'd', 'e')
tuple2 = ('1','2','3')
tuple3 = ('a', 'b', 'c', 'd', 'e')

cmp(tuple1, tuple2)

cmp(tuple2, tuple1)

cmp(tuple1, tuple3)

### Длина кортежа

# Функция len возвращает общую длину кортежа

len(tuple1)

### Функция max
# Функция max возвращает элемент из кортежа с максимальным значением

max(tuple1)
max(tuple2)

### Функция min

# Функция min возвращает элемент из кортежа со значением min
min(tuple1)
min(tuple2)

## Преобразовать список в кортеж     
# Мы можем менять или конвертировать объект из одного типа данных в другой. В нашем случае, мы конвертируем список в кортеж.

# данный код конвертирует кортеж в список при помощи функции list.
a = [1, 2, 3]
print(a)

a[1] = 15
print(a)

### Встроенная функция tuple преобразует список в кортеж.
list = [1,2,3,4,5]
tuple(list)

## Конкатенация кортежей

# Используйте + для конкатенации двух кортежей
tuple1 + tuple2

# При удалении кортежа (например, с помощью del, или сборщика мусора) небольшой длины (не более 19 элементов), он не удалется сразу, а перемещается в очередь удаления. Эта очередь имеет 20 групп, в каждую из которых помещаются удалённые кортежи соответствующей длины, причём в первой группе хранится пустой кортеж.

tuple_0 = (1, 2, 3)
print('tuple_0 %s' % id(tuple_0))  # 140332152236648

tuple_1 = (1, 2, 3)
print('tuple_1 %s' % id(tuple_1))  # 140332152236720

del tuple_1
# Далее предполагается, что сборка мусора уже прошла.
# Проще всего наблюдать за работой из интерактивного сеанса
# интерпретатора.

tuple_2 = (1, 2, 4)
print('tuple_2 %s' % id(tuple_2))  # 140332152236720

