# Сортировка выбором (Selection Sort)

# Этот алгоритм сегментирует список на две части: отсортированные и несортированные. 
# Он постоянно удаляет наименьший элемент из несортированного сегмента списка 
# и добавляет его в отсортированный сегмент.

# Алгоритм Selection Sort
# На практике нам не нужно создавать новый список для отсортированных элементов, 
# мы будет обрабатывать крайнюю левую часть списка как отсортированный сегмент. 
# Затем мы ищем во всем списке наименьший элемент и меняем его на первый элемент.

# Теперь мы знаем, что первый элемент списка отсортирован, 
# мы получаем наименьший элемент из оставшихся элементов и заменяем его вторым элементом. 
# Это повторяется до тех пор, пока последний элемент списка не станет оставшимся элементом для изучения.

# Реализация Selection Sort
def selection_sort(nums):  
    # значение i соответствует тому, сколько значений было отсортировано
    for i in range(len(nums)):
        # Мы предполагаем, что первый элемент несортированного сегмента является наименьшим
        lowest_value_index = i
        # Этот цикл перебирает несортированные элементы
        for j in range(i + 1, len(nums)):
            # по мере того как i увеличивается, нам нужно проверять все меньше элементов.
            if nums[j] < nums[lowest_value_index]:
                lowest_value_index = j
        # Поменять местами значения самого низкого несортированного элемента с первым несортированным
        nums[i], nums[lowest_value_index] = nums[lowest_value_index], nums[i]

# Проверяем, что это работает
random_list_of_nums = [12, 8, 3, 20, 11]  
selection_sort(random_list_of_nums)  
print(random_list_of_nums)  

# Сложность сортировки выбором в среднем составляет O(n^2).
