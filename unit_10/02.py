## Конструкция try - except

# Для обработки исключений используется конструкция try - except.

# try:                              # (try строго 1)
#     try_ suite                    # код, который может выполниться с ошибкой
# except exception_group1 as var1:  # (except - 0 (если есть finally) и более)
#     except_suite1                 # код, выполняемый в случае исключения 'exception_group1'
# ...                               # ссылка на исключение может быть записана в 'var1'
# except exception_groupN as varN:
#     except_suiteN                 # код, выполняемый в случае исключения 'exception_groupN'
# ...                               # except-блоков может быть произвольное кол-во
# else:                             # (else - 0 или 1)
#     else_suite                    # выполняется, если try не завершен преждевременно (например, break)
# finally:                          # (finally - 0 или 1)
#     finally_suite                 # код, который должен выполнится всегда (была ошибка выше или нет)


# Ход выполнения:
# - код, который потенциально может привести к ошибке, помещается в блок try;
# - в случае ошибки, код немедленно завершается и переходит в обработчик except (если он указан для соответствующего исключения);
# - после поток выполнения переходит к else (если исключений не было) и finally (в любом случае).

# Программный код должен быть написан с учетом того, что в любом его месте может возникнуть ошибка, для чего необходимо эффективно использовать соответствующие средства языка программирования:

# - код, который потенциально может привести к ошибкам, должен быть помещен в блок try;
# - блок except должен:
#     - обрабатывать исключения максимально конкретно (указывать конкретные классы); стоит определять свои классы исключений, когда это это имеет смысл;
#     - категорически не следует «тушить» исключения (писать пустой или бессмысленный except);
# - в блоках except следует снова возбуждать исключения (raise), которые не обрабатываются явно, передавая обработку в участок кода, который должен определять дальнейшие действия программы;
# - блок finally следует использовать для освобождения ресурсов (это может быть закрытие файла или сетевого соединения), независимо от того, прошла операция успешно или нет.


# Обработка исключений - предпочитаемый способ в Python, а использование блоков зависит от конкретной ситуации.

# простой способ обработки исключений

try:
    x = int(input("Введите целое число x (для вычисления 1/x): "))
    res = 1 / x

    print("1/{} = {:.2f}".format(x, res))
except:
    print("Произошла ошибка!")

# Подобный вариант обработки исключений не рекомендуется, т.к. блок except будет перехватывать любое исключение, что не позволит точно определить ошибку в коде. Улучшить код можно, добавив обработку исключения по классу.
