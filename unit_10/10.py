# Утверждения (assert)
# Еще один способ, используемый для борьбы с ошибками - использование утверждений - специальных конструкций, выполняющих проверку произвольного условия на истинность.

# В Python утверждения поддерживаются оператором assert.

# assert
# assert boolean_expression[, optional_expression]

#  boolean_expression: логическое выражение для проверки
#  optional_expression: необязательное сообщение (строка)
# Если boolean_expression возвращает False, возбуждается исключение AssertionError с сообщением optional_expression (если задано).

## Использование утверждений в Python

# Использование оператора assert поможет отследить неверно реализованную функцию

def add_to_list(x, lst=[]):
    # Использование assert здесь оправдано - список всегда
    # подразумевается пустым
    assert len(lst) == 0, "Список должен быть пуст!"

    lst.append(x)
    return lst

print(add_to_list(1))
print(add_to_list(2))

# В отличие от исключений утверждения являются отладочным инструментом и могут быть отключены при компиляции/интерпретации программы

# Как пропустить ошибки и продолжить выполнение
# В идеале, вы не должны этого делать. Но если вы все еще хотите это сделать, следуйте приведенному ниже коду, чтобы проверить правильный подход.


try:
    assert False
except AssertionError:
    pass
print('Welcome to Prometheus!!!')
