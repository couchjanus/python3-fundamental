# Инициализация класса
# При создании экземпляра класса, как правило, требуется проводить его инициализацию 
# (например, устанавливать начальные значения полей), 
# для чего в Python предназначен специальный метод __init__. 
# В ряде языков программирования близкий по смыслу к __init__ метод называется «конструктором» (Constructor).

# Инициализация класса

class Point:
    """point on the plane."""

    # Инициализирующий метод (специальный метод с __)
    def __init__(self, x, y):
        self.x = x  # Поля читаются и записываются через 'self'
        self.y = y  # 'self' указывает на текущий экземпляр класса

    # Обычный метод объекта (метод экземпляра класса) имеет те же правила,
    # наименования что и обычные функции
    def distance(self):
        """Вернуть расстояние до центра координат."""
        return (self.x**2 + self.y**2)**0.5


if __name__ == "__main__":

    # Создание объекта (экземпляра класса)
    # Передаем параметры, которые теперь требует '__init__()'
    # Параметр 'self' не передается явно, но содержит ссылку на 'p'
    p = Point(3, 4)

    # При выводе объекта на экран по умолчанию отображается имя класса
    print(p)

    # После инициализации доступны атрибуты 'p.x' и 'p.y',
    # где хранятся переданные при создании объекта значения
    print(p.x, p.y)  # 3 4

    # Вызов обычного метода
    print("Расстояние до центра координат: {:.2f}".format(p.distance()))  # 5

# объявлены:

# 2 поля x и y;
# метод инициализации __init__();
# метод экземпляра класса distance().

# Первым параметром метода идет параметр self, в котором содержится ссылка на экземпляр, 
# который вызвал данный метод.
